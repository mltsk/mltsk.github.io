(()=>{"use strict";var n={8:(n,e,t)=>{t.d(e,{Z:()=>m});var r=t(15),o=t.n(r),a=t(645),A=t.n(a),i=t(667),c=t.n(i),l=new URL(t(365),t.b),s=new URL(t(121),t.b),u=new URL(t(264),t.b),f=new URL(t(10),t.b),d=A()(o()),p=c()(l),C=c()(s),g=c()(u),h=c()(f);d.push([n.id,"@font-face{font-family:Geometria;src:url("+p+') format("woff2"),url('+C+') format("woff");font-weight:500;font-style:normal}@font-face{font-family:Geometria;src:url('+g+') format("woff2"),url('+h+') format("woff");font-weight:700;font-style:normal}*{box-sizing:border-box}body{min-height:100vh;margin:0;padding-top:34px;color:#f2f2f2;font-family:Geometria,Roboto,Arial,sans-serif;font-style:normal;font-weight:500;background:#ffa1a1;background:linear-gradient(180deg, #ffa1a1 0%, #ff7b7b 100%)}.wrapper{display:flex;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;margin:0 auto;background:rgba(255,255,255,.12549);border-radius:18px}@media screen and (max-width: 650px){.wrapper{margin-top:0;width:100%}}.calculator{width:552px;margin:38px 31px;padding:46px;background:linear-gradient(155.23deg, #28518e 0%, #3a77d1 100%);box-shadow:0 82px 158px rgba(0,0,0,.35),0 24.7206px 47.6324px rgba(0,0,0,.228),0 10.2677px 19.7841px rgba(0,0,0,.175),0 3.7136px 7.1555px rgba(0,0,0,.122);border-radius:18px}@media screen and (max-width: 650px){.calculator{width:100%;min-height:100vh;padding:46px 20px;margin:0;border-radius:0}}.calculator__header{display:flex;flex-direction:column;align-items:flex-end;height:208px;border-bottom:2px solid rgba(255,255,255,.20784)}.calculator__calculation{height:32px;margin-top:85px;max-width:100%;font-size:24px;line-height:32px;overflow:hidden}.calculator__result{max-width:100%;height:80px;margin-top:28px;font-weight:700;font-size:56px;line-height:80px;overflow:hidden}.calculator__controls{display:grid;grid-template-columns:1fr 1fr 1fr 1fr;grid-row-gap:16px;row-gap:16px;padding:0 10px;margin-top:36px}.calculator__button{display:flex;align-items:center;justify-content:center;width:80px;height:80px;padding:0;border-radius:50%;background-color:transparent;border:none;color:inherit;font-family:Geometria,Roboto,Arial,sans-serif;font-style:normal;font-weight:500;font-size:36px;line-height:88px;cursor:pointer}.calculator__button:disabled{color:#a1a1a1}.calculator__button:hover{background-color:rgba(255,255,255,.07059)}.calculator__button__result{color:#2b589a;background-color:#fff}.calculator__button__result:hover{background-color:rgba(255,255,255,.56471)}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAAA,WACE,qBAAA,CACA,kHACE,CAEF,eAAA,CACA,iBAAA,CAGF,WACE,qBAAA,CACA,kHACE,CAEF,eAAA,CACA,iBAAA,CAGF,EACE,qBAAA,CAGF,KACE,gBAAA,CACA,QAAA,CACA,gBAAA,CACA,aAAA,CACA,6CAAA,CACA,iBAAA,CACA,eAAA,CACA,kBAAA,CACA,4DAAA,CAGF,SACE,YAAA,CACA,yBAAA,CACA,sBAAA,CACA,iBAAA,CACA,aAAA,CACA,mCAAA,CACA,kBAAA,CAEA,qCATF,SAUI,YAAA,CACA,UAAA,CAAA,CAIJ,YACE,WAAA,CACA,gBAAA,CACA,YAAA,CACA,+DAAA,CACA,0JACE,CAIF,kBAAA,CAEA,qCAZF,YAaI,UAAA,CACA,gBAAA,CACA,iBAAA,CACA,QAAA,CACA,eAAA,CAAA,CAIJ,oBACE,YAAA,CACA,qBAAA,CACA,oBAAA,CACA,YAAA,CACA,gDAAA,CAGF,yBACE,WAAA,CACA,eAAA,CACA,cAAA,CACA,cAAA,CACA,gBAAA,CACA,eAAA,CAGF,oBACE,cAAA,CACA,WAAA,CACA,eAAA,CACA,eAAA,CACA,cAAA,CACA,gBAAA,CACA,eAAA,CAGF,sBACE,YAAA,CACA,qCAAA,CACA,iBAAA,CACA,YAAA,CACA,cAAA,CACA,eAAA,CAGF,oBACE,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,UAAA,CACA,WAAA,CACA,SAAA,CACA,iBAAA,CACA,4BAAA,CACA,WAAA,CACA,aAAA,CACA,6CAAA,CACA,iBAAA,CACA,eAAA,CACA,cAAA,CACA,gBAAA,CACA,cAAA,CAEA,6BACE,aAAA,CAGF,0BACE,yCAAA,CAIJ,4BACE,aAAA,CACA,qBAAA,CAGF,kCACE,yCAAA",sourcesContent:['@font-face {\n  font-family: Geometria;\n  src:\n    url("fonts/Geometria-Regular.woff2") format("woff2"),\n    url("fonts/Geometria-Regular.woff") format("woff");\n  font-weight: 500;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: Geometria;\n  src:\n    url("fonts/Geometria-Medium.woff2") format("woff2"),\n    url("fonts/Geometria-Medium.woff") format("woff");\n  font-weight: 700;\n  font-style: normal;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  min-height: 100vh;\n  margin: 0;\n  padding-top: 34px;\n  color: #f2f2f2;\n  font-family: Geometria, Roboto, Arial, sans-serif;\n  font-style: normal;\n  font-weight: 500;\n  background: rgb(255 161 161);\n  background: linear-gradient(180deg, rgb(255 161 161 / 100%) 0%, rgb(255 123 123 / 100%) 100%);\n}\n\n.wrapper {\n  display: flex;\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  margin: 0 auto;\n  background: rgba(255,255,255,0.12549);\n  border-radius: 18px;\n\n  @media screen and (max-width: 650px) {\n    margin-top: 0;\n    width: 100%;\n  }\n}\n\n.calculator {\n  width: 552px;\n  margin: 38px 31px;\n  padding: 46px;\n  background: linear-gradient(155.23deg, #28518e 0%, #3a77d1 100%);\n  box-shadow:\n    0 82px 158px rgb(0 0 0 / 35%),\n    0 24.7206px 47.6324px rgb(0 0 0 / 22.8%),\n    0 10.2677px 19.7841px rgb(0 0 0 / 17.5%),\n    0 3.7136px 7.1555px rgb(0 0 0 / 12.2%);\n  border-radius: 18px;\n\n  @media screen and (max-width: 650px) {\n    width: 100%;\n    min-height: 100vh;\n    padding: 46px 20px;\n    margin: 0;\n    border-radius: 0;\n  }\n}\n\n.calculator__header {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  height: 208px;\n  border-bottom: 2px solid rgba(255,255,255,0.20784);\n}\n\n.calculator__calculation {\n  height: 32px;\n  margin-top: 85px;\n  max-width: 100%;\n  font-size: 24px;\n  line-height: 32px;\n  overflow: hidden;\n}\n\n.calculator__result {\n  max-width: 100%;\n  height: 80px;\n  margin-top: 28px;\n  font-weight: 700;\n  font-size: 56px;\n  line-height: 80px;\n  overflow: hidden;\n}\n\n.calculator__controls {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-row-gap: 16px;\n  row-gap: 16px;\n  padding: 0 10px;\n  margin-top: 36px;\n}\n\n.calculator__button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 80px;\n  height: 80px;\n  padding: 0;\n  border-radius: 50%;\n  background-color: transparent;\n  border: none;\n  color: inherit;\n  font-family: Geometria, Roboto, Arial, sans-serif;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 36px;\n  line-height: 88px;\n  cursor: pointer;\n\n  &:disabled {\n    color: rgb(161 161 161);\n  }\n\n  &:hover {\n    background-color: rgba(255,255,255,0.07059);\n  }\n}\n\n.calculator__button__result {\n  color: #2b589a;\n  background-color: white;\n}\n\n.calculator__button__result:hover {\n  background-color: rgba(255,255,255,0.56471);\n}\n'],sourceRoot:""}]);const m=d},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var A=this[a][0];null!=A&&(o[A]=!0)}for(var i=0;i<n.length;i++){var c=[].concat(n[i]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,o=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,a=[],A=!0,i=!1;try{for(t=t.call(n);!(A=(r=t.next()).done)&&(a.push(r.value),!e||a.length!==e);A=!0);}catch(n){i=!0,o=n}finally{try{A||null==t.return||t.return()}finally{if(i)throw o}}return a}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],A=o[3];if(!A)return a;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(A)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),l="/*# ".concat(c," */"),s=A.sources.map((function(n){return"/*# sourceURL=".concat(A.sourceRoot||"").concat(n," */")}));return[a].concat(s).concat([l]).join("\n")}return[a].join("\n")}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},A=[],i=0;i<n.length;i++){var c=n[i],l=r.base?c[0]+r.base:c[0],s=a[l]||0,u="".concat(l," ").concat(s);a[l]=s+1;var f=t(u),d={css:c[1],media:c[2],sourceMap:c[3]};-1!==f?(e[f].references++,e[f].updater(d)):e.push({identifier:u,updater:o(d,r),references:1}),A.push(u)}return A}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var A=0;A<a.length;A++){var i=t(a[A]);e[i].references--}for(var c=r(n,o),l=0;l<a.length;l++){var s=t(a[l]);0===e[s].references&&(e[s].updater(),e.splice(s,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r=t.css,o=t.media,a=t.sourceMap;o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},10:(n,e,t)=>{n.exports=t.p+"1b16651e7f4cc351074f.woff"},264:(n,e,t)=>{n.exports=t.p+"8d57bf2f0682db5d7cb8.woff2"},121:(n,e,t)=>{n.exports=t.p+"8a7c9bf6c4fb69e13595.woff"},365:(n,e,t)=>{n.exports=t.p+"914be1665d1d946c626c.woff2"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),A=t.n(a),i=t(565),c=t.n(i),l=t(216),s=t.n(l),u=t(589),f=t.n(u),d=t(8),p={};p.styleTagTransform=f(),p.setAttributes=c(),p.insert=A().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=s(),e()(d.Z,p),d.Z&&d.Z.locals&&d.Z.locals;const C=["0","1","2","3","4","5","6","7","8","9","/","-","+",",","x","(",")","%"],g=["+","-","*","/"],h=["√","%"],m=[...g,...h],b=[".","0","1","2","3","4","5","6","7","8","9"],x=["-",...b],w=["(",")"],y={"+":1,"-":1,"*":2,"/":2,"%":3,"√":3},v=n=>n[n.length-1],_=(n,e)=>{const t=e[e.length-1],r=Number(n[n.length-2]),o=Number(n[n.length-1]);switch(t){case"+":return r+o;case"-":return r-o;case"*":return r*o;case"/":return r/o;case"%":return o/100;case"√":return Math.sqrt(o);default:throw Error(`Unknown operator: ${t}`)}},E=(n,e,t)=>{const r=e.pop();g.includes(r)&&n.pop(),n.pop(),n.push(t)},k=n=>{const e=(n=>{const e=[],t=[];for(let r=0;r<n.length;r+=1){const o=n[r];if("("===o)t.push(o);else if(")"===o){for(;"("!==v(t);){const n=_(e,t);E(e,t,n)}t.pop()}else if("number"==typeof o)e.push(o);else if(m.includes(o))if(t.length){if("("===v(t))t.push(o);else if(y[o]>y[v(t)])t.push(o);else if(y[o]<=y[v(t)]){for(;y[o]<=y[v(t)];){const n=_(e,t);E(e,t,n)}t.push(o)}}else t.push(o);if(r===n.length-1)for(;0!==t.length;){const n=_(e,t);E(e,t,n)}}return e[0]})((n=>{const e=n.replaceAll(",",".").replaceAll("x","*"),t=[];for(let n=0;n<e.length;n+=1){const r=e[n-1],o=e[n];if(g.includes(o)&&r&&!g.includes(r))t.push(o);else if(h.includes(o))t.push(o);else if(w.includes(o))t.push(o);else if(x.includes(o)){let r="";do{r+=e[n],n+=1}while(b.includes(e[n]));n-=1,t.push(Number(r))}}return t})(n));return String((t=e,String(t).split(".")[1]?.length>4?Number(t.toFixed(4)):t));var t};(()=>{const n=document.querySelectorAll(".calculator__button__symbol"),e=document.querySelector(".calculator__button__clean"),t=document.querySelector(".calculator__button__result"),r=document.querySelector(".calculator__calculation"),o=document.querySelector(".calculator__result");n.forEach((n=>{n.addEventListener("click",(n=>{n.target instanceof HTMLElement&&(r.textContent+=n.target.textContent)}))})),e.addEventListener("click",(()=>{r.textContent="",o.textContent="0"})),t.addEventListener("click",(()=>{o.textContent=k(r.textContent)})),document.addEventListener("keydown",(n=>{console.log("event.key: ",n.key),C.includes(n.key)?r.textContent+=n.key:"Enter"===n.key?(n.preventDefault(),o.textContent=k(r.textContent)):"Escape"===n.key&&(r.textContent="",o.textContent="0")}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,